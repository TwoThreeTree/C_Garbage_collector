run
s
print Ref
s
info args
info locals
print next_ref
print free_index
print object_index[0]
print object_index[1]
print object_index[2]
print object_index.size()
break drop_reference
run
n
break 28
run
s
break operator=
break operator =
break MemObject<ARF>::operator =
break MemObject<ARF>::operator=
run
n
n
n
quit
break 28
run
s
n
q
break 28
run
s
n
print object_index.size()
n
print object_index[0]
print object_index[1]
run
c
c
c
quit
break drop_reference
run
n
print index
n
print curr_size
n
n
print object_index[index]
quit
break drop_reference
run
backtrace
c
backtrace
quit
break drop_reference
run
c
n
print index
n
print curr_size
n
quit
break drop_reference
run
backtrace
c
backtrace
n
make 
run
backtrace
c
backtrace
n
c
backtrace
c
backtrace
quit
break 43
run
s
print object_index->size
print object_index->size()
print object_index.size()
print next_ref
quit
break 45
run
n
break 44
run
y
s
n
s
n
break 41
run
quit
break 41
run
n
s
n
n
n
s
n
s
backtrace3
backtrace
make
break 46
run
quit
break 46
run
s
n
s
n
quit
break 54
run 
s
n
run
s
print Ref
print ref
make
run
s
n
quit
quit
break 54
run
s
n
s
c
quit
break 56
run
s
print index
n
print index
s
n
print object_index[index]
break main.cpp 54
help break
quit
break 54
run
s
n
print index
n
print object_index[index]
n
print object_index[index]
n
quit
break 40
run
s
q
run
backtrace
quit
break 114
run
s
n
n
print rc
print *rc
quit
run
backtrace
print ref
print *curr
quit
bye
quit
break 44 value->d != 0
info b
help break
break 44 if value->d != 0
info b
run
delete 1
info b
break 44 if test->d != 0
run
print *test
print test->d
q
break 46 if x != 0.0
run
backtrace
ls
list
s
n
print x
n
s
n
print *entry
print loc
print object_index[loc]
n
print object_index[loc]
n
print curr_buffer[free_index]
n
n
c
p
l
p x
n
s
n
print addr
print curr_buffer[addr]
n
print object
print *object
n
print rc
print *rc
n
s
n
print loc
print chain
s
n
print curr_buffer[free_index]
n
print curr_buffer[free_index]
quit
